/*import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;
import java.security.NoSuchAlgorithmException;
import java.security.MessageDigest;

import javax.xml.bind.DatatypeConverter;

public class Solution {

    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        
        String regex = "[a-zA-Z0-9]";
        Pattern p = Pattern.compile(regex);
        String password = scan.nextLine();

        Matcher m = p.matcher(password);
        boolean Passes = m.matches();
        
        try {
            if (password.length() >= 6 && password.length() <= 20) {
                if (Passes) { // String  consists of English alphabetic letters (i.e. a-zA-Z,  and/or decimal digits (i.e. 0-9,  through ) only.
                    String hash = DatatypeConverter.printHexBinary(MessageDigest.getInstance("MD5").digest(password.getBytes("UTF-8")));
                    System.out.println(hash.toLowerCase());
                }
            }
        } catch (NoSuchAlgorithmException e) {
            System.out.println(e.getMessage());
        } catch (UnsupportedEncodingException e) {
            System.out.println(e.getMessage());
        }
    }
}*/

import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

public class Solution {

    public static void main(String[] args) throws UnsupportedEncodingException {
        Scanner scan = new Scanner(System.in);
        String valToHash = scan.nextLine();
        String hash = "";

        if (valToHash != null && !valToHash.isEmpty()) {
            hash = toMD5(valToHash);
        } else {
            // Empty or null
        }
        System.out.println(hash);
    }

    public static String toMD5(String input) throws UnsupportedEncodingException {
        try {
            MessageDigest md = MessageDigest.getInstance("MD5");
            byte[] inputData = input.getBytes("UTF-8");
            md.update(inputData, 0, input.length());

            String hash = new BigInteger(1, md.digest()).toString(16);
            return hash;

        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        return "";
    }
}

